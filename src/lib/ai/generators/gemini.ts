/**
 * Gemini AI Generator
 * 
 * Clean implementation of Gemini AI integration with proper typing
 */

import { GoogleGenAI, Type } from '@google/genai';
import { AI_CONFIGS } from '../config/models.js';
import { createDeckGenerationSchema, DECK_CREATION_CONTEXT } from '../prompts/deck-generation.js';
import { createContentFilteringPrompt, CONNECTION_TEST_PROMPT } from '../prompts/content-filtering.js';

// Proper result types
export interface AIResult<T> {
  success: boolean;
  result?: T;
  error?: string;
  rawResponse?: string;
}

export interface DeckGenerationResult extends AIResult<any> {
  deck?: any;
}

/**
 * Test Gemini connection with proper typing
 */
export async function testGeminiConnection(apiKey: string): Promise<AIResult<string>> {
  try {
    const ai = new GoogleGenAI({ apiKey });
    
    const response = await ai.models.generateContent({
      model: AI_CONFIGS.CONNECTION_TEST.model,
      contents: CONNECTION_TEST_PROMPT,
    });
    
    return {
      success: true,
      result: response.text,
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Process prompts for content filtering with proper typing
 */
export async function processPromptForContentFiltering(
  apiKey: string, 
  originalPrompt: string
): Promise<AIResult<string>> {
  try {
    const ai = new GoogleGenAI({ apiKey });
    
    const response = await ai.models.generateContent({
      model: AI_CONFIGS.CONTENT_FILTERING.model,
      contents: createContentFilteringPrompt(originalPrompt),
    });
    
    return {
      success: true,
      result: response.text,
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * Parse response text into deck data
 */
function parseResponseText(responseText: string, cardCount: number): DeckGenerationResult {
  // Extract JSON from markdown code blocks if present
  const jsonMatch = responseText.match(/```(?:json)?\s*({[\s\S]*?})\s*```/);
  if (jsonMatch) {
    responseText = jsonMatch[1];
  }
  
  // Try to parse the JSON
  let deckData;
  try {
    deckData = JSON.parse(responseText);
  } catch (parseError) {
    return {
      success: false,
      rawResponse: responseText,
      error: `Failed to parse JSON response: ${parseError instanceof Error ? parseError.message : 'Unknown parse error'}`
    };
  }
  
  // Basic validation of deck structure
  if (!deckData.deck || !deckData.deck.meta || !Array.isArray(deckData.deck.cards)) {
    return {
      success: false,
      rawResponse: responseText,
      error: 'Generated JSON does not match expected deck structure'
    };
  }
  
  // Validate that we have cards with required fields (IDs will be generated by importer)
  const hasValidCards = deckData.deck.cards.every((card: any) => {
    return card.title && card.subtitle && card.description && 
           Array.isArray(card.traits) && Array.isArray(card.stats);
  });
  
  if (!hasValidCards) {
    return {
      success: false,
      rawResponse: responseText,
      error: 'One or more cards are missing required fields'
    };
  }
  
  // Validate card count meets minimum requirement
  if (deckData.deck.cards.length < cardCount) {
    console.warn(`Requested at least ${cardCount} cards but got only ${deckData.deck.cards.length}`);
  } else if (deckData.deck.cards.length > cardCount) {
    console.log(`âœ¨ Generated ${deckData.deck.cards.length} cards (requested minimum: ${cardCount})`);
  }
  
  return {
    success: true,
    deck: deckData,
    rawResponse: responseText,
  };
}

/**
 * Generate a complete deck from a prompt with configurable card count
 */
export async function generateDeckFromPrompt(
  apiKey: string, 
  theme: string, 
  cardCount: number = 8
): Promise<DeckGenerationResult> {
  try {
    const ai = new GoogleGenAI({ apiKey });
    
    const schema = createDeckGenerationSchema(cardCount);
    
    console.log(`ðŸš€ Generating deck: "${theme}" (${cardCount}+ cards)`);
    
    // Create user prompt with flexible card count
    const userPrompt = `Create a deck of at least ${cardCount} cards (up to 20 if the topic supports more interesting cards) themed around: ${theme}`;
    
    const response = await ai.models.generateContent({
      model: AI_CONFIGS.DECK_GENERATION.model,
      contents: userPrompt,
      config: {
        systemInstruction: DECK_CREATION_CONTEXT,
        responseMimeType: 'application/json',
        responseSchema: schema,
        temperature: AI_CONFIGS.DECK_GENERATION.temperature,
      }
    });
    
    // Handle response text
    const rawText = response.text;
    const responseText = (rawText || '').trim();
    
    console.log(`âœ… Response received (${responseText.length} chars)`);
    
    return parseResponseText(responseText, cardCount);
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}
